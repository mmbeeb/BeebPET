

	; SCREEN EDITOR
.EDITOR_START
{


	; CLEAR SCREEN
.*CINT
{
	LDA #3
	STA DFLTO


IF NOT(ROMTAB)	
	; LINE START TABLES
	LDA #LO(SRAM)
	LDY #HI(SRAM)
	LDX #0

.J1	STA LDTB2,X
	PHA
	TYA
	STA LDTB3,X
	PLA
	CLC
	ADC #40
	BCC J2
	
	INY
	
.J2	INX
	CPX #25
	BNE J1
ENDIF


	; CLEAR SCREEN	
.^CLSR
	SEC
	ROR VFLAG	; DON'T UPDATE SCREEN

	LDX #25+2
	LDA #$80
	
.L1	STA LDTB1-1,X
	DEX
	BNE L1
	
	STX RVS		; RVS = 0

	LDA #' '
	LDX #250
	
.LPS4
	STA SRAM-1,X
	STA SRAM+250-1,X
	STA SRAM+500-1,X
	STA SRAM+750-1,X
	DEX
	BNE LPS4
	
	LSR VFLAG	; UPDATE SCREEN

	; HOME
.*NXTD
	LDY #0
	STY PNTR
	STY TBLX
	
	
	; SET UP PNT, PNTR & LNMX
.*STUPT
	LDX TBLX	; TBLX = VPOS
	
	LDA LDTB2,X
	STA PNT
	LDA LDTB3,X
	STA PNT+1	; PNT -> START OF LINE(VPOS)

	LDA #39
	
	CPX #24
	BEQ STUPZ	; IF LAST LINE (CAN'T BE WRAPPED)
	
	LDY LDTB1+1,X
	BMI STUPZ	; IF FLAG SET NOT WRAPPED
	
	LDA #79
	
.STUPZ
	STA LNMX	; MAX LINE LENGTH

	LDA PNTR	; PNTR = HPOS
	CMP #40
	BCC STUPR	; IF PNTR < 40
	
	SBC #40
	STA PNTR
	
.STUPR
	RTS
}


	; INSERT KEY INTO BUFFER
.*PUTKEY
{
	LDX NDX
	STA KEYD,X
	INX
	CPX #10
	BCC KEYF	; IF X < 10
	
	LDX #0
	
.KEYF
	STX NDX
	RTS
}


	; GET CHR FROM KEYBOARD BUFFER
	; CHECK NDX IS > 0 BEFORE CALLING
.GETKY2
{
	;ENABLE CURSOR HERE
	;(PNT)+PNTR -> ADDRESS OF CURSOR POSITION
	; ALTERNATIVELY, TBLX = VPOS, PNTR = HPOS
	
	LDX PNTR	;HPOS
	LDY TBLX	;VPOS
	JSR CURSON

.L1	LDA NDX
	BEQ L1	; WAIT FOR KEY
	
	;DISABLE CURSOR HERE
	JSR CURSOFF

	; CHECK NDX > 0 BEFORE CALLING
	; Z=NO KEY
.*GETKEY
	SEI		; DON'T WANT NDX TO CHANGE
			; I.E. IF KEY INSERTED INTO BUFFER

	LDY KEYD
	LDX #0
	
.L2	LDA KEYD+1,X
	STA KEYD,X
	INX
	CPX NDX
	BNE L2
	
	DEC NDX
	TYA		; EXIT A=Y=CHR, Z=A==0
	CLI
	RTS
}


	;INPUT LINE, AND READ LINE

	;CRSW = MODE (0 = INPUT, ELSE READ INPUT A CHR AT A TIME)
	;INDX = LENGTH OF LINE
	;LNMX = MAX LENGTH OF LINE
	;PNT -> START OF LINE
	;PNT + PNTR -> NEXT CHR
	;LSXP ;START GF SCREEN INPUT   ???
{
	;INPUT LINE (PNT -> BUFFER)
{
.LOOP4
	JSR PRT	; PRINT CHR A
	
.^LOOP3
	JSR GETKY2

IF FALSE
	CMP #K_RUN	; RUN?
	BNE LP22

	SEI
	LDX #RUNTBE-RUNTB	; LOAD & RUN
	STX NDX
	
.LP23
	LDA RUNTB-1,X
	STA KEYD-1,X
	DEX
	BNE LP23
	
	CLI
	BEQ LOOP3	; ALWAYS
ENDIF	
	
.LP22
	CMP #$D
	BNE LOOP4	; IF NOT CR
}

	LDY LNMX
	STY CRSW
	
	; SKIP TRAILING SPACES
	
.CLP5
{
	LDA (PNT),Y
	CMP #' '
	BNE CLP6
	
	DEY
	BNE CLP5
	
.CLP6
	INY
	STY INDX	; LENGTH
}
	
	LDY #0
	STY PNTR
	STY QTSW
	
	LDA LSXP
	BMI LOP5
	
	CMP TBLX
	BNE LOP5
	
	LDA LSTP
	STA PNTR
	CMP INDX
	BCC LOP5
	BCS CLP2	; ALWAYS
	
.*LOOP5				; ENTRY POINT, CALLED BY GET WHEN KEYBOARD IS INPUT DEVICE
	TYA
	PHA
	TXA
	PHA
	
	LDA CRSW		; INPUT/GET FLAG
	BEQ LOOP3		; IF INPUT LINE
	
	; READ INPUT
	
.LOP5
	LDY PNTR
	LDA (PNT),Y
	STA DATAX
	
	; SCREEN CODE, SO CONVERT TO ASCII
.LOP51
{
	AND #$3F
	ASL DATAX
	BIT DATAX
	BPL LOP54
	
	ORA #$80
	
.LOP54
	BCC LOP52
	
	LDX QTSW
	BNE LOP53
	
.LOP52
	BVS LOP53
	
	ORA #$40
	
.LOP53
}

	INC PNTR
	
	JSR QTSWC
	
	CPY INDX
	BNE CLP1	; IF NOT END OF LINE
	
	
.CLP2
	LDA #0
	STA CRSW
	
	LDA #$D
	
	LDX DFLTO
	CPX #3
	BEQ CLP21	; IF OUTPUT TO SCREEN
	
.CLP2A
	JSR PRT
	
.CLP21
	LDA #$D
	
.CLP1			; EXIT!
	STA DATAX
	
	PLA
	TAX
	PLA
	TAY
	
	LDA DATAX
	CMP #$DE	; '^'+128
	BNE CLP7
	
	LDA #$FF
	
.CLP7
	RTS
}


	; IN QUOTES?
.QTSWC
{
	CMP #$22
	BNE QTSWL
	
	LDA QTSW
	EOR #$1
	STA QTSW
	LDA #$22
	
.QTSWL
	RTS
}

	
.NXT33
	ORA #$40
	
.NXT3
	LDX RVS
	BEQ NVS
	
.NC3
	ORA #$80	; IF RVS ON
	
.NVS
	LDX INSRT
	BEQ NVS1
	
	DEC INSRT
	
.NVS1
	JSR DSPP	; WRITE CHR TO SCREEN
	
.JSTS
	INC PNTR
	LDY LNMX
	CPY PNTR
	BCS LOOP2
	
	LDX TBLX
	CPY #79
	BNE JSTS1
	
	JSR JSTSX
	JSR NXLN
	LDA #0
	STA PNTR
	BEQ LOOP2
	
.JSTS1
	CPX #24
	BNE JTS2
	
	JSR SCRL
	
.LOOP2
	PLA
	TAY
	LDA INSRT
	BEQ LOP2
	
	LSR QTSW
	
.LOP2
	PLA
	TAX
	PLA
	RTS
	
.JSTSX
	CPX #23
	BCS JSXB	; IF X >= 23
	
	SEC
	ROR LDTB1+2,X			; SET LINE X+2 WRAP FLAG
	
.JSXB
	RTS
	
.JTS2
	JSR JSTS2
	JMP LOOP2
	
.SCRL
	JSR SCROL
	
	DEC TBLX
	LDX TBLX
	
.JSTS2
	LSR LDTB1+1,X			; CLEAR LINE X WRAP FLAG
	
	
	JSR JSTSX
	
	LDA PNTR
	PHA
	JSR STUPT
	PLA
	STA PNTR
	
	RTS
	
	
	; GO TO END OF PREVIOUS LINE
.BKLN
{
	LDY #39
	
	LDX TBLX
	BNE BKLN1
	
	STX PNTR	; X = 0
	
	PLA
	PLA
	BNE LOOP2
	
.BKLN1
	LDA LDTB1-1,X
	BMI NTCN2			; IF LINE X-1 WRAP FLAG SET
	
	DEX
	LDA LDTB1-1,X
	
	LDY #79
	
.NTCN2
	DEX
	STX TBLX

	LDA LDTB3,X
	STA PNT+1
	LDA LDTB2,X
	STA PNT
	
	STY PNTR
	STY LNMX
	RTS
}


	; PRINT CHR A
.*PRT
{
	PHA
	STA DATAX
	
	TXA
	PHA
	TYA
	PHA
	
	LDA #0
	STA CRSW
	
	LDY PNTR
	
	LDA DATAX
	BPL *+5			; IF A < 128
	
	JMP NXTX
	
	; A < 128
	
	CMP #$D
	BNE NJT1		; IF A != CR
	
	; A == CR
	
	JMP NXT1
	
.NJT1
	CMP #' '
	BCC NTCN		; IF A < 32
	
	; A >= 32
	
	AND #$3F
	JSR QTSWC
	JMP NXT3
	
	; A < 32, A != CR
	
.NTCN
	LDX INSRT
	BEQ CNC3X
	
	JMP NC3
	
.CNC3X
	CMP #K_DEL
	BNE NTCN1
	
	; DELETE
{
	DEY
	STY PNTR
	BPL BK1
	
	JSR BKLN
	JMP BK2
	
.BK1
	INY
	LDA (PNT),Y
	DEY
	STA (PNT),Y
	INY
	CPY LNMX
	BNE BK1
	
.BK2
	LDA #' '
	STA (PNT),Y
	LSR VFLAG		;UPDATE SCREEN
	BPL JPL3		;ALWAYS
}
	
.NTCN1
	LDX QTSW
	BEQ NC3W
	
.CNC3
	JMP NC3
	
.NC3W
	CMP #K_RVSON
	BNE NC1
	
	; RVS ON
	
	STA RVS
	
.NC1
	CMP #K_HOME
	BNE NC2
	
	; HOME
	
	JSR NXTD
	
.NC2
	CMP #K_RIGHT
	BNE NCX2
	
	; CURSOR RIGHT
	
	INY
	STY PNTR
	DEY
	CPY LNMX
	BCC NCZ2
	
	JSR NXLN
	LDY #0
	
.JPL4
	STY PNTR
	
.NCZ2
	JMP LOOP2
	
.NCX2
	CMP #K_DOWN
	BNE JPL3
	
	; CURSOR DOWN
	
	CLC
	TYA
	ADC #40
	TAY
	CMP LNMX
	BCC JPL4
	BEQ JPL4
	
	JSR NXLN
	
.JPL3
	JMP LOOP2
	
	; A >= 128
.NXTX
{
	AND #$7F
	CMP #$7F
	BNE NXTX1	; IF A != 127
	
	LDA #$5E	; A = '^'
	
.NXTX1

	CMP #' '
	BCC *+5		; IF A < 32
	
	JMP NXT33
	
	; CONTROL CHR
	
	CMP #$D
	BNE UP5		; IF A != CR
	
	; A == CR
	
	JMP NXT1
	
.UP5
	LDX QTSW
	BNE UP6		; IF IN QUOTES
	
	CMP #K_INST
	BNE UP9
	
	; INST
{
	LDY LNMX
	LDA (PNT),Y
	CMP #' '
	BNE INS3	; IF A != SPACE
	
	CPY PNTR
	BNE INS1
	
.INS3
	CPY #79
	BEQ JPL3
	
	JSR NEWLN
	
.INS1
	LDY LNMX
	
.INS2
	DEY
	LDA (PNT),Y
	INY
	STA (PNT),Y
	DEY
	CPY PNTR
	BNE INS2
	
	LDA #$20
	STA (PNT),Y
	
	LSR VFLAG	; UPDATE SCREEN
	
	INC INSRT
	BNE JLP2
}
	
.UP9
	LDX INSRT
	BEQ UP2
	
.UP6
	ORA #$40
	JMP NC3
	
.UP2
	CMP #K_UP
	BNE NXT2
	
	; CURSOR UP
	
	LDA PNTR
	CMP #40
	BCC UP1
	
	SBC #40
	STA PNTR
	BCS JLP2
	
.UP1
	LDX TBLX
	BEQ JLP2
	
	LDA LDTB1-1,X
	BPL UP3		; IF LINE X-1 FLAG CLEAR
	
	DEC TBLX
	JSR STUPT
	BCC JLP2
	
.UP3
	DEX
	DEX
	STX TBLX
	JSR STUPT
	
	LDA PNTR
	CLC
	ADC #40
	STA PNTR
	BNE JLP2
	
.NXT2
	CMP #K_RVSOFF
	BNE NXT6
	
	; RVS OFF
	
	LDA #0
	STA RVS
	
.NXT6
	CMP #K_LEFT
	BNE NXT61
	
	; CURSOR LEFT
	
	DEY
	STY PNTR
	BPL JLP2
	
	JSR BKLN
	JMP LOOP2
	
.NXT61
	CMP #K_CLR
	BNE JLP2
	
	; CLEAR SCREEN
	
	JSR CLSR
	
.JLP2
	JMP LOOP2
}
}

	
	; GO TO NEXT LINE
.NXLN
{
	SEC
	LSR LSXP
	LDX TBLX
	
.NXLN2
	INX
	CPX #25
	BNE NXLN1
	
	JSR SCROL
	
.NXLN1
	LDA LDTB1,X
	BPL NXLN2
	
	STX TBLX
	JMP STUPT
}


	; NEW LINE
.NXT1
	LDA #0
	STA INSRT
	STA RVS
	STA QTSW
	STA PNTR
	JSR NXLN
	JMP LOOP2
	

	; SCROLL UP
.SCROL
{
	P1 = PNT
	P2 = SAL

	SEC
	ROR VFLAG	; DON'T UPDATE SCREEN
	
	S = SRAM + 1000 - 1024
	; X = NO. OF CHRS
	; Y = 1024 - 1000 + X
	; P1 = S - X
	; P2 = S
	
	LDX #40
	LDY #24+40
	LDA #LO(S-40)
IF HI(S-40)<>HI(S-80)
	STA P1
	LDA #HI(S-40)
ENDIF
	
	BIT LDTB1+1
	BMI SCRL1	; IF LINE 1 FLAG SET
	
	LDX #80
	LDY #24+80
	LDA #LO(S-80)
IF HI(S-40)<>HI(S-80)
	STA P1
	LDA #HI(S-80)
ENDIF
	
.SCRL1
IF HI(S-40)=HI(S-80)
	STA P1
	LDA #HI(S-40)
ENDIF
	STA P1+1
IF NOT(HI(S-40)=HI(S-80) AND HI(S-40)=HI(S))
	LDA #HI(S)
ENDIF
	STA P2+1
	LDA #LO(S)
	STA P2
	
.MLP1
	LDA (P2),Y
	STA (P1),Y
	INY
	BNE MLP1

	INC P1+1
	INC P2+1
	LDA #HI(S)+4
	CMP P2+1
	BNE MLP1
	
	; CLEAR 'NEW' LINE(S)

	TXA
	TAY
	LDA #' '
	
.MLP2
	DEY
	STA (P1),Y
	BNE MLP2

{
	; SCROLL WRAP FLAGS TOO!
	; NEW VERSION!
	
	LDX #24
	STX TBLX
		
	LDX #0
	LDY #1
	
	LDA LDTB1+1
	BMI L1
	
	; SCROLL TWO LINES
	INY
	DEC TBLX
	
.L1	LDA LDTB1,Y
	STA LDTB1,X
	INX
	INY
	CPX #25
	BNE L1
}

	LSR VFLAG	; UPDATE SCREEN
	
	LDX #TK_RVS
	JSR TESTKEY
	BNE MLP42	; IF 'RVS' KEY NOT PRESSED

	LDY #8
	
.MLP4
	STA TIH
	
.MLP41
	BIT IFR
	BVC MLP41	; IF NOT TIMED OUT
	
	DEY
	BNE MLP4
	
	;Y=0	
	STY NDX		; CLEAR KEY BUFFER

	
.MLP42
	LDX TBLX
	RTS
}


	; INSERT LINE BELOW CURSOR
.NEWLN
{
	LDX TBLX	; CURSOR LINE
	INX
	
	SEC
	ROR VFLAG		; DON'T UPDATE SCREEN
	
	CPX #24
	BEQ BLKLN	; IF X == 24 LAST LINE
	BCC NEWLX	; IF X < 24
	
	JMP SCRL
	
.NEWLX
	P1 = SAL
	P2 = PNT

	LDX #23
	
.NEWL1
	LDA LDTB1,X
	BMI NEWLA		; IF WRAP FLAG SET
	
	LSR LDTB1+1,X	; CLEAR FLAG
	
.NEWLA
	LDA LDTB3+1,X
	STA P1+1
	LDA LDTB2+1,X
	STA P1

	LDA LDTB3,X
	STA P2+1
	LDA LDTB2,X
	STA P2
	
	LDY #39
	
.NELL
	LDA (P2),Y
	STA (P1),Y
	DEY
	BPL NELL
	
	DEX
	CPX TBLX
	BNE NEWL1
	
	INX
	
	; BLANK LINE
.BLKLN
	LSR LDTB1,X		; CLEAR WRAP FLAG (BIT 7)

	LDA LDTB2,X		; PNT -> LINE
	STA PNT
	LDA LDTB3,X
	STA PNT+1
	
	LDY #39	; CLEAR LINE
	LDA #' '
	
.BLKL
	STA (PNT),Y
	DEY
	BPL BLKL

	LSR VFLAG		; UPDATE SCREEN
	
	JMP STUPT
}


	; WRITE TO CURSOR
.DSPP
{
	TAY
	
.DSPP1	
	TYA
	LDY PNTR	; Y=HPOS
	STA (PNT),Y	; PNT -> START OF LINE
	
	LSR VFLAG	; UPDATE SCREEN
	RTS
}

IF ROMTAB	
.LDTB2	; LO(SRAM + 40 * X)
	FOR X, 0, 24
		EQUB LO(SRAM+40*X)
	NEXT
	
.LDTB3	; HI(SRAM + 40 * X)
	FOR X, 0, 24
		EQUB HI(SRAM+40*X)
	NEXT
ENDIF
	
;.RUNTB
	;EQUS "LOAD",$D
	;EQUS "RUN",$D
;.RUNTBE


}
.EDITOR_END

