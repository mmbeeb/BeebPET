

	; I/O
.KERNAL_START
{
	; MESSAGES

.MS1
.MS19	EQUB 13
		EQUS "READY."
		EQUB 13 OR &80


	; PRINT MESSAGE
.MSG
	LDA MS1,Y
	PHP
	AND #$7F
	JSR PRT
	INY
	PLP
	BPL MSG
	
	RTS

{
.*CGETL

.*GETIN
	LDA #0
	STA SATUS
	
	LDA DFLTN
	BNE BN10	; IF NOT KEYBOARD
	
	LDA NDX
	BEQ BN32	; IF QUEUE EMPTY EXIT
	
	JMP GETKEY;LP2	;EDITOR, RETURN CHR FROM QUEUE IN A


;.KBASIN
.*CINCH
;.RDT	
.*BASIN
	LDA DFLTN
	BNE BN10	; IF NOT KEYBOARD
	
	LDA PNTR
	STA LSTP
	LDA TBLX
	STA LSXP
	
	JMP LOOP5	;EDITOR
	
.BN10
	CMP #3
	BNE BN20	; IF NOT SCREEN
	
	STA CRSW
	LDA LNMX
	STA INDX
	
	JMP LOOP5	;EDITOR
	
.BN20
	LDA #$D

.BN32
	RTS
}

	
	; WRITE CHR A
.*KBSOUT
.*OUTCH
.*WRT
	
.*BSOUT
{
	PHA
	
	LDA DFLTO
	CMP #3
	BNE BO10	;IF != SCREEN
	
	PLA
	JMP PRT	;EDITOR
	
.BO10
	RTS
}

.*TESTKEY		; IS KEY PRESSED?
	LDA #$79
	JSR OSBYTE
	TXA
	AND #$80
	CMP #$80	; IF KEY PRESSED THEN C=1, Z=1
	RTS

{
.STOP1				; PRESERVE X & Y
	STX SAL
	STY SAH
	
	LDX #TK_STOP
	JSR TESTKEY
	PHP
	BNE STOP2		; IF 'STOP' KEY NOT PRESSED
	
	JSR CLRCH
	STA NDX			; A == 0
	
.STOP2
	LDX SAL
	LDY SAH
	PLP	
	
.SPMSGX
	RTS
	
.*ISCNTC
.*STOPX
	JSR STOP1
	JMP BSTOP
	


.^SPMSG
	JSR TXTST
	BNE SPMSGX
	
	JMP MSG
	
	
.^TXTST
	LDA TXTPTR+1
	CMP #HI(BUF)


}

{
.*CSAVE
.*SAVE
	LDA #0
	BEQ SV1	;ALWAYS

.*CLOAD
.*LOAD
	LDA #$FF
	
.SV1
	PHA

	JSR PARS1
	JSR SV60
	
	PLA
	PHA
	BEQ SV2
	
	INC FEXA	; USE CONTROL BLOCK ADDRESS FOR LOAD
	
.SV2
	LDX #LO(FBLK)
	LDY #HI(FBLK)
	JSR OSFILE
	
	PLA
	BEQ SV3
	
	LDY #MS19-MS1	;CR, "READY", CR
	JSR SPMSG
	
	JSR TXTST
	BNE LD205	;IF "LOAD" IN PROGRAM
	
	CLC				; VARTAB = TXTTAB + LENGTH OF FILE
	LDA TXTTAB
	ADC FLEN
	STA VARTAB
	LDA TXTTAB+1
	ADC FLEN+1
	STA VARTAB+1
	
	JMP FINI	;BASIC
	
.LD205
	JSR STXTPT
	JMP FLOAD	;BASIC	
		
.SV3
	RTS
	
	
	; POP STAL, STAH, EAL, EAH
.SV60
	LDA VARTAB
	STA EAL				;END ADDRESS
	LDA VARTAB+1
	STA EAH
	
	LDA TXTTAB+1
	STA STAH			;START ADDRESS
	STA FSTAH
	LDA TXTTAB
	STA STAL
	STA FSTAL
	RTS
}

.PARSI
{
	LDX #0
	STX SATUS	;SATUS=0
	;STX FNLEN	;FNLEN=0
	STX SA		;SA=0
	;INX
	;STX FA		;FA=1 (DEVICE)
	
	LDA #$FF
	LDX #18
	
.L1	STA FBLK-1,X
	DEX
	BNE L1
	
	RTS
}
	
	;USES BASIC ROUTINES TO PARSE
	;LOAD,SAVE,VERIFY STATEMENTS
	;     LOAD
	;          (FILE NAME OPTION)
	;          (OPT DEVICE #) DFLT=1
	;          (EOT CMD) DFLT=0=NO
.PARS1
	JSR PARSI
	;LDX #0
	;STX SATUS	;SATUS=0
	;STX FNLEN	;FNLEN=0
	;STX SA		;SA=0
	;INX
	;STX FA		;FA=1 (DEVICE)
	
	JSR PR140
	JSR PR200	;FILENAME
	
	JSR PR140
	JSR PR070	;FIRST ADDRESS
	;STX FA
	
	JSR PR140
	JSR PR070	;SECOND ADDRESS
	STX SA
	
.PR060
	RTS
	
.PR070
	JSR PR150
	JMP GETBYT

	;READ STRING I.E. FILENAME	
.PR200
	JSR FRMEVL
	JSR FRESTR
	TAY				; Y = LEN
	;STA FNLEN
	LDA INDEX1
	STA FNADR
	STA SAL
	
	LDA INDEX1+1
	STA FNADR+1
	STA SAH
	
	LDA #CR
	STA (SAL),Y
	RTS


.PR140
	JSR CHRGOT
	BNE PR147	;IF CHR GOT
	
	;ELSE EXIT CALLING ROUTINE
	
	PLA
	PLA
	
.PR147
	RTS

.PR150
	JSR CHKCOM	;BASIC
	
.PR130
	JSR CHRGOT
	BNE PR147	;IF CHR GOT
	
.PR135
	JMP SNERR	;SYNTAX ERROR

	
.*COPEN	
.*OPEN
	BRK
	
.*CVERF
.*VER			; NO VERIFY TOO!

	;CLOSE-LOAD-OPEN'
.*CCLOS
.*CLOSE

	;O/C CHAN,R/W TAPE
.*COIN
.*CHKIN
	
;.CHKOUT
.*COOUT
.*CKOUT
	RTS
	
.*CCALL
.*CLALL
.*CLSCHN
.*CCCHN
.*CLRCH			; EXIT WITH A==0
	LDA #0
	RTS
}


.*CSYS
.*SYS
	JSR FRMNUM
	JSR GETADR
	JMP (LINNUM)
	

.*START
{
	LDX #$FF
	TXS

	LDA #0
	STA NDX
	STA DFLTN	;KEYBOARD
		; DFLTO=3 IN EDITOR, CINT
	
	JSR CINT	;EDITOR	
	JMP INIT;BASIC
}


{
.POKADJ
	SEC
	LDA POKER
	SBC#LO(&8000-SRAM)
	STA POKER
	LDA POKER+1
	SBC#HI(&8000-SRAM)
	STA POKER+1
	RTS


	; PEEK ADDRESS
	; Y=0
.*KPEEK
	JSR POKADJ
	JMP GETCON

	; POKE ADDRESS
.*KPOKE
	JSR POKADJ
	;JMP POKK
	
	TXA
	LDY #0
	STA (POKER),Y
	LSR VFLAG
	RTS

}
.KERNAL_END

